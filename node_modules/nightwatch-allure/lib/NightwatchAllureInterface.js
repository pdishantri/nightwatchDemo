"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Allure_1 = require("./allure/Allure");
const isPromise_1 = require("./allure/isPromise");
const StepWrapper_1 = require("./StepWrapper");
class NightwatchAllureInterface extends Allure_1.Allure {
    constructor(reporter, runtime) {
        super(runtime);
        this.reporter = reporter;
    }
    step(name, body) {
        const wrappedStep = this.startStep(name);
        let result;
        try {
            result = wrappedStep.run(body);
        }
        catch (err) {
            wrappedStep.endStep();
            throw err;
        }
        if (isPromise_1.isPromise(result)) {
            const promise = result;
            return promise
                .then(a => {
                wrappedStep.endStep();
                return a;
            })
                .catch(e => {
                wrappedStep.endStep();
                throw e;
            });
        }
        wrappedStep.endStep();
        return result;
    }
    logStep(name, status) {
        this.step(name, () => { });
    }
    attachment(name, content, type) {
        const file = this.reporter.writeAttachment(content, type);
        this.currentExecutable.addAttachment(name, type, file);
    }
    testAttachment(name, content, type) {
        const file = this.reporter.writeAttachment(content, type);
        this.currentTest.addAttachment(name, type, file);
    }
    startStep(name) {
        const allureStep = this.currentExecutable.startStep(name);
        this.reporter.pushStep(allureStep);
        return new StepWrapper_1.StepWrapper(this.reporter, allureStep);
    }
    get currentTest() {
        if (this.reporter.currentTest === null) {
            throw new Error("No test running!");
        }
        return this.reporter.currentTest;
    }
    get currentExecutable() {
        const executable = this.reporter.currentStep || this.reporter.currentTest;
        if (executable === null) {
            throw new Error("No executable!");
        }
        return executable;
    }
}
exports.NightwatchAllureInterface = NightwatchAllureInterface;
//# sourceMappingURL=NightwatchAllureInterface.js.map