"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AllureReporter_1 = require("./AllureReporter");
const fs_1 = __importDefault(require("fs"));
const AllureRuntime_1 = require("./allure/AllureRuntime");
const model_1 = require("./allure/model");
class NightwatchAllureReporter {
    constructor(opts) {
        this.sendData = false;
        const folderName = opts && opts.folder ? opts.folder : "allure-results";
        const sendData = opts && opts.sendData ? opts.sendData : false;
        const allureConfig = { resultsDir: folderName };
        if (sendData)
            this.sendData = true;
        this.coreReporter = new AllureReporter_1.AllureReporter(new AllureRuntime_1.AllureRuntime(allureConfig));
        exports.allure = this.coreReporter.getInterface();
    }
    write(results, done) {
        let suiteStatus = model_1.Status.BROKEN;
        let testCount = 0;
        let passedCount = 0;
        let failedCount = 0;
        let skippedCount = 0;
        let partialCount = 0;
        for (let currentModuleName in results.modules) {
            testCount++;
            let currentModule = results.modules[currentModuleName];
            let currentTest = {
                reportPrefix: currentModule.reportPrefix,
                failures: currentModule.failures,
                errors: currentModule.errors,
                skipped: currentModule.skipped.length,
                tests: currentModule.tests,
                isFailure: currentModule.failures > 0 || currentModule.errors > 0,
                isSkipped: currentModule.skipped.length === currentModule.tests,
                suiteName: currentModule.group,
                testName: currentModuleName,
                testSteps: [],
                errorMessage: "",
                timeMs: parseFloat(currentModule.time) * 1000,
                tags: {}
            };
            if (currentTest.suiteName === "") {
                currentTest.suiteName = currentTest.testName;
            }
            if (results.environment !== "") {
                currentTest.suiteName =
                    currentTest.suiteName + "-" + results.environment;
            }
            this.coreReporter.startSuite(currentTest.suiteName);
            this.coreReporter.startCase(currentTest);
            exports.allure.attachment("Reported Result", JSON.stringify(currentModule), model_1.ContentType.JSON);
            for (let completedStep in currentModule.completed) {
                let step = exports.allure.startStep(completedStep);
                const currentStep = currentModule.completed[completedStep];
                if (currentStep.tests === currentStep.passed) {
                    step.setStatus(model_1.Status.PASSED);
                }
                else if (currentStep.tests === currentStep.skipped) {
                    step.setStatus(model_1.Status.SKIPPED);
                }
                else if (currentStep.tests === currentStep.failed) {
                    step.setStatus(model_1.Status.FAILED);
                    step.setDetailsTrace(currentStep.stackTrace);
                }
                else {
                    step.setStatus(model_1.Status.BROKEN);
                    step.setDetailsTrace(currentStep.stackTrace);
                }
                for (let completedAssertion in currentStep.assertions) {
                    const currentAssertion = currentStep.assertions[completedAssertion];
                    let assertion = exports.allure.startStep(currentAssertion.message);
                    assertion.setDescription(currentAssertion.fullMsg);
                    if (currentAssertion.failure) {
                        assertion.setStatus(model_1.Status.FAILED);
                        assertion.setDetailsTrace(currentAssertion.stackTrace);
                    }
                    else {
                        assertion.setStatus(model_1.Status.PASSED);
                    }
                    if (currentAssertion.screenshots && currentAssertion.screenshots.length > 0) {
                        for (let index in currentAssertion.screenshots) {
                            const file = currentAssertion.screenshots[index];
                            const data = fs_1.default.readFileSync(file);
                            exports.allure.attachment("Screenshot", data, model_1.ContentType.PNG);
                        }
                    }
                    assertion.endStep();
                }
                step.endStep(currentStep.timeMs);
            }
            for (let skippedStep in currentModule.skipped) {
                let step = exports.allure.startStep(skippedStep);
                step.setStatus(model_1.Status.SKIPPED);
                step.endStep();
            }
            if (currentModule.assertionsCount != 0 && currentModule.assertionsCount === currentModule.passedCount) {
                this.coreReporter.setTestStatus(model_1.Status.PASSED);
                passedCount++;
            }
            else if (currentModule.assertionsCount != 0 && currentModule.assertionsCount === currentModule.skippedCount) {
                this.coreReporter.setTestStatus(model_1.Status.SKIPPED);
                skippedCount++;
            }
            else if (currentModule.assertionsCount === currentModule.failedCount) {
                this.coreReporter.setTestStatus(model_1.Status.FAILED);
                failedCount++;
            }
            else {
                this.coreReporter.setTestStatus(model_1.Status.BROKEN);
                partialCount++;
            }
            if (currentModule.errmessages && currentModule.errmessages.length > 0)
                this.coreReporter.setTestDetailsTrace(currentModule.errmessages.join(","));
            this.coreReporter.completeTest();
            this.coreReporter.endSuite();
        }
        if (testCount === passedCount)
            suiteStatus = model_1.Status.PASSED;
        else if (testCount === failedCount)
            suiteStatus = model_1.Status.FAILED;
        else if (testCount === skippedCount)
            suiteStatus = model_1.Status.SKIPPED;
        if (this.sendData)
            done(suiteStatus, testCount, passedCount, failedCount, skippedCount, partialCount);
        else
            done();
    }
}
exports.NightwatchAllureReporter = NightwatchAllureReporter;
//# sourceMappingURL=NightwatchAllureReporter.js.map